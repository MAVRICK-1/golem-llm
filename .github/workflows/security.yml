name: 🔒 WASM Security Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily security scans
  workflow_dispatch:     # Manual trigger

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  security-analysis:
    name: 🔍 WASM Component Security
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust Toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        targets: wasm32-wasip1
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-security-
          ${{ runner.os }}-cargo-
        
    - name: 🔧 Install Security Tools
      run: |
        # Install cargo-make (build system)
        cargo install cargo-make
        
        # Install WASM component tools
        cargo install cargo-component@0.20.0
        cargo install wasm-tools
        
        # Install security audit tools
        cargo install cargo-audit cargo-deny
        
        # Install WABT for WASM analysis
        wget -q https://github.com/WebAssembly/wabt/releases/download/1.0.34/wabt-1.0.34-ubuntu.tar.gz
        tar -xzf wabt-1.0.34-ubuntu.tar.gz
        sudo cp wabt-1.0.34/bin/* /usr/local/bin/
        rm -rf wabt-1.0.34*
        
        # Verify installations
        echo "🔍 Verifying tool installations..."
        cargo-make --version
        cargo-component --version
        wasm-validate --version
        cargo audit --version
        
    - name: 🏗️ Build WASM Components
      run: |
        echo "🔨 Building all WASM components for security analysis..."
        
        # Build debug versions
        echo "Building debug components..."
        cargo make build-all
        
        # Build release versions  
        echo "Building release components..."
        cargo make release-build-all
        
        # Verify builds
        echo "📊 Build verification:"
        if [ -d "components/debug" ]; then
          echo "Debug components: $(find components/debug -name "*.wasm" | wc -l)"
          ls -la components/debug/
        fi
        
        if [ -d "components/release" ]; then
          echo "Release components: $(find components/release -name "*.wasm" | wc -l)"
          ls -la components/release/
        fi
        
    - name: 🔍 WASM Security Analysis
      run: |
        echo "🔍 Starting comprehensive WASM security analysis..."
        
        # Make security script executable
        chmod +x scripts/security-analysis.sh
        
        # Run security analysis
        ./scripts/security-analysis.sh
        
    - name: 🧪 Dependency Security Audit
      run: |
        echo "🧪 Running dependency security audits..."
        
        total_vulnerabilities=0
        
        for component in llm-anthropic llm-grok llm-openai llm-openrouter llm-ollama; do
          if [ -d "$component" ]; then
            echo "Auditing $component..."
            cd "$component"
            
            # Run cargo audit
            if cargo audit --json > "../${component}-audit.json" 2>/dev/null; then
              vulns=$(jq -r '.vulnerabilities | length' "../${component}-audit.json" 2>/dev/null || echo "0")
              echo "  → $vulns vulnerabilities found"
              total_vulnerabilities=$((total_vulnerabilities + vulns))
              
              if [ "$vulns" -gt 0 ]; then
                echo "  ⚠️ Vulnerabilities in $component:"
                jq -r '.vulnerabilities[] | "    - \(.package.name) \(.package.version): \(.advisory.title)"' "../${component}-audit.json"
              fi
            else
              echo "  ❌ Audit failed for $component"
            fi
            
            # Run cargo deny
            cargo deny check --format json > "../${component}-deny.json" 2>/dev/null || true
            
            cd ..
          fi
        done
        
        echo "📊 Total vulnerabilities found: $total_vulnerabilities"
        
    - name: 📊 Generate Security Dashboard
      run: |
        echo "📊 Generating comprehensive security dashboard..."
        
        # Create enhanced HTML report
        cat > security-dashboard.html << 'HTML_START'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Golem LLM Security Analysis Dashboard</title>
            <style>
                * { margin: 0; padding: 0; box-sizing: border-box; }
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh; padding: 20px;
                }
                .container { 
                    max-width: 1400px; margin: 0 auto; 
                    background: white; border-radius: 15px; 
                    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                    overflow: hidden;
                }
                .header { 
                    background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
                    color: white; padding: 30px; text-align: center;
                }
                .header h1 { font-size: 2.5em; margin-bottom: 10px; }
                .header p { opacity: 0.9; font-size: 1.1em; }
                .metrics { 
                    display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
                    gap: 20px; padding: 30px; background: #f8f9fa;
                }
                .metric-card { 
                    background: white; padding: 25px; border-radius: 10px;
                    text-align: center; box-shadow: 0 5px 15px rgba(0,0,0,0.08);
                    border-left: 4px solid #3498db;
                }
                .metric-value { font-size: 2.5em; font-weight: bold; margin-bottom: 5px; }
                .metric-label { color: #7f8c8d; font-size: 0.9em; text-transform: uppercase; }
                .metric-critical { border-left-color: #e74c3c; }
                .metric-warning { border-left-color: #f39c12; }
                .metric-success { border-left-color: #2ecc71; }
                .content { padding: 30px; }
                .component-grid { 
                    display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); 
                    gap: 20px; margin: 20px 0;
                }
                .component-card { 
                    border: 1px solid #ddd; border-radius: 10px; overflow: hidden;
                    box-shadow: 0 3px 10px rgba(0,0,0,0.1);
                }
                .component-header { 
                    padding: 15px 20px; font-weight: bold;
                    display: flex; justify-content: space-between; align-items: center;
                }
                .component-body { padding: 20px; background: #fafafa; }
                .risk-critical { background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%); color: white; }
                .risk-high { background: linear-gradient(135deg, #ffa726 0%, #fb8c00 100%); color: white; }
                .risk-medium { background: linear-gradient(135deg, #ffcc02 0%, #ffb300 100%); color: white; }
                .risk-low { background: linear-gradient(135deg, #66bb6a 0%, #43a047 100%); color: white; }
                .risk-badge { 
                    padding: 5px 15px; border-radius: 20px; font-size: 0.8em;
                    text-transform: uppercase; font-weight: bold; background: rgba(255,255,255,0.2);
                }
                .detail-section { margin: 20px 0; }
                .detail-section h3 { margin-bottom: 10px; color: #2c3e50; }
                .progress-bar { 
                    background: #ecf0f1; height: 8px; border-radius: 4px; overflow: hidden;
                    margin: 10px 0;
                }
                .progress-fill { height: 100%; transition: width 0.3s ease; }
                .progress-critical { background: #e74c3c; }
                .progress-warning { background: #f39c12; }
                .progress-success { background: #2ecc71; }
                .recommendations { 
                    background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
                    color: white; padding: 25px; border-radius: 10px; margin: 20px 0;
                }
                .recommendations h3 { margin-bottom: 15px; }
                .recommendations ul { padding-left: 20px; }
                .recommendations li { margin: 8px 0; opacity: 0.95; }
                pre { 
                    background: #2c3e50; color: #ecf0f1; padding: 15px; 
                    border-radius: 8px; overflow-x: auto; font-size: 0.9em;
                    border-left: 4px solid #3498db;
                }
                .timestamp { 
                    text-align: center; padding: 20px; color: #7f8c8d; 
                    border-top: 1px solid #ecf0f1;
                }
                @media (max-width: 768px) {
                    .metrics { grid-template-columns: 1fr; }
                    .component-grid { grid-template-columns: 1fr; }
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>🔒 Security Analysis Dashboard</h1>
                    <p>Comprehensive WASM Component Security Report for Golem LLM</p>
                </div>
        
                <div class="metrics">
        HTML_START
        
        # Calculate and add metrics
        total_components=$(find . -name "*-security-analysis.json" 2>/dev/null | wc -l)
        critical_components=$(grep -l '"risk_level": "CRITICAL"' *-security-analysis.json 2>/dev/null | wc -l)
        total_critical_issues=$(jq -s 'map(.summary.critical_issues) | add' *-security-analysis.json 2>/dev/null || echo "0")
        total_warnings=$(jq -s 'map(.summary.warnings) | add' *-security-analysis.json 2>/dev/null || echo "0")
        total_vulnerabilities=$(find . -name "*-audit.json" -exec jq -r '.vulnerabilities | length' {} \; 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
        
        cat >> security-dashboard.html << HTML_METRICS
                    <div class="metric-card metric-success">
                        <div class="metric-value">$total_components</div>
                        <div class="metric-label">Components Analyzed</div>
                    </div>
                    <div class="metric-card $([ "$critical_components" -gt 0 ] && echo "metric-critical" || echo "metric-success")">
                        <div class="metric-value">$critical_components</div>
                        <div class="metric-label">Critical Risk Components</div>
                    </div>
                    <div class="metric-card $([ "$total_critical_issues" -gt 0 ] && echo "metric-critical" || echo "metric-success")">
                        <div class="metric-value">$total_critical_issues</div>
                        <div class="metric-label">Critical Issues</div>
                    </div>
                    <div class="metric-card $([ "$total_warnings" -gt 5 ] && echo "metric-warning" || echo "metric-success")">
                        <div class="metric-value">$total_warnings</div>
                        <div class="metric-label">Warnings</div>
                    </div>
                    <div class="metric-card $([ "$total_vulnerabilities" -gt 0 ] && echo "metric-critical" || echo "metric-success")">
                        <div class="metric-value">$total_vulnerabilities</div>
                        <div class="metric-label">Dependency Vulnerabilities</div>
                    </div>
                </div>
        
                <div class="content">
                    <h2>🛡️ Component Security Analysis</h2>
                    <div class="component-grid">
        HTML_METRICS
        
        # Add component analysis results
        for report_file in *-security-analysis.json; do
          if [ -f "$report_file" ]; then
            component=$(jq -r '.component' "$report_file" 2>/dev/null || echo "Unknown")
            risk_level=$(jq -r '.risk_level' "$report_file" 2>/dev/null || echo "UNKNOWN")
            critical_issues=$(jq -r '.summary.critical_issues' "$report_file" 2>/dev/null || echo "0")
            warnings=$(jq -r '.summary.warnings' "$report_file" 2>/dev/null || echo "0")
            file_size=$(jq -r '.file_size_bytes' "$report_file" 2>/dev/null || echo "0")
            size_mb=$((file_size / 1024 / 1024))
            
            cat >> security-dashboard.html << HTML_COMPONENT
                        <div class="component-card">
                            <div class="component-header risk-$(echo $risk_level | tr '[:upper:]' '[:lower:]')">
                                <span>$component</span>
                                <span class="risk-badge">$risk_level</span>
                            </div>
                            <div class="component-body">
                                <p><strong>Size:</strong> ${size_mb}MB</p>
                                <p><strong>Critical Issues:</strong> $critical_issues</p>
                                <p><strong>Warnings:</strong> $warnings</p>
                                <details style="margin-top: 15px;">
                                    <summary style="cursor: pointer; font-weight: bold;">📋 View Analysis Details</summary>
                                    <pre style="margin-top: 10px;">$(jq '.' "$report_file" 2>/dev/null | head -50)</pre>
                                </details>
                            </div>
                        </div>
        HTML_COMPONENT
          fi
        done
        
        # Add recommendations and footer
        cat >> security-dashboard.html << 'HTML_END'
                    </div>
                    
                    <div class="recommendations">
                        <h3>🚀 Security Recommendations</h3>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px;">
                            <div>
                                <h4>🚨 Immediate Actions</h4>
                                <ul>
                                    <li>Address all CRITICAL risk components</li>
                                    <li>Review components with exposed sensitive data</li>
                                    <li>Update dependencies with known vulnerabilities</li>
                                    <li>Implement input validation for all interfaces</li>
                                </ul>
                            </div>
                            <div>
                                <h4>🛡️ Security Enhancements</h4>
                                <ul>
                                    <li>Add runtime security monitoring</li>
                                    <li>Implement rate limiting for resource operations</li>
                                    <li>Regular automated security scanning</li>
                                    <li>Security training for development team</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="timestamp">
                    <p>🕒 Report generated on $(date) | 🔗 <a href="https://github.com/golemcloud/golem-llm">Golem LLM Repository</a></p>
                </div>
            </div>
        </body>
        </html>
        HTML_END
        
        echo "✅ Security dashboard generated: security-dashboard.html"
        
    - name: 🚦 Security Gate Check
      id: security-gate
      run: |
        echo "🚦 Running security gate evaluation..."
        
        # Count critical issues
        critical_components=$(grep -l '"risk_level": "CRITICAL"' *-security-analysis.json 2>/dev/null | wc -l)
        total_critical_issues=$(jq -s 'map(.summary.critical_issues) | add' *-security-analysis.json 2>/dev/null || echo "0")
        total_vulnerabilities=$(find . -name "*-audit.json" -exec jq -r '.vulnerabilities | length' {} \; 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
        
        # Security thresholds (configurable)
        MAX_CRITICAL_COMPONENTS=0
        MAX_CRITICAL_ISSUES=0  
        MAX_VULNERABILITIES=0
        
        echo "📊 Security Gate Evaluation:"
        echo "  Critical components: $critical_components (threshold: $MAX_CRITICAL_COMPONENTS)"
        echo "  Critical issues: $total_critical_issues (threshold: $MAX_CRITICAL_ISSUES)"
        echo "  Vulnerabilities: $total_vulnerabilities (threshold: $MAX_VULNERABILITIES)"
        
        # Determine gate result
        gate_passed=true
        
        if [ "$critical_components" -gt "$MAX_CRITICAL_COMPONENTS" ]; then
          echo "❌ FAIL: $critical_components critical components exceed threshold"
          gate_passed=false
        fi
        
        if [ "$total_critical_issues" -gt "$MAX_CRITICAL_ISSUES" ]; then
          echo "❌ FAIL: $total_critical_issues critical issues exceed threshold"  
          gate_passed=false
        fi
        
        if [ "$total_vulnerabilities" -gt "$MAX_VULNERABILITIES" ]; then
          echo "❌ FAIL: $total_vulnerabilities vulnerabilities exceed threshold"
          gate_passed=false
        fi
        
        # Set outputs for other steps
        echo "gate-passed=$gate_passed" >> $GITHUB_OUTPUT
        echo "critical-components=$critical_components" >> $GITHUB_OUTPUT
        echo "critical-issues=$total_critical_issues" >> $GITHUB_OUTPUT
        echo "vulnerabilities=$total_vulnerabilities" >> $GITHUB_OUTPUT
        
        if [ "$gate_passed" = "true" ]; then
          echo "✅ SECURITY GATE PASSED: All checks within acceptable thresholds"
        else
          echo "❌ SECURITY GATE FAILED: Security issues must be addressed"
        fi
        
    - name: 💬 Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const gatePassed = '${{ steps.security-gate.outputs.gate-passed }}';
          const criticalComponents = '${{ steps.security-gate.outputs.critical-components }}';
          const criticalIssues = '${{ steps.security-gate.outputs.critical-issues }}';
          const vulnerabilities = '${{ steps.security-gate.outputs.vulnerabilities }}';
          
          const status = gatePassed === 'true' ? '✅ PASSED' : '❌ FAILED';
          const emoji = gatePassed === 'true' ? '🎉' : '🚨';
          
          const comment = `## ${emoji} WASM Security Analysis Results
          
          **Security Gate**: ${status}
          
          ### 📊 Summary
          - **Critical Components**: ${criticalComponents}
          - **Critical Issues**: ${criticalIssues}  
          - **Dependency Vulnerabilities**: ${vulnerabilities}
          
          ### 📋 Details
          ${gatePassed === 'true' 
            ? '🎯 All security checks passed! Your changes meet security requirements.' 
            : '⚠️ Security issues detected. Please review and address before merging.'}
          
          📊 [View detailed security report](../../actions/runs/${{ github.run_id }})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
    - name: 📦 Upload Security Reports  
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-analysis-reports-${{ github.run_number }}
        path: |
          security-dashboard.html
          *-security-analysis.json
          *-audit.json
          *-deny.json
        retention-days: 30
        
    - name: 🚨 Fail Build on Security Issues
      if: steps.security-gate.outputs.gate-passed != 'true'
      run: |
        echo "🚨 Build failed due to security gate violations"
        echo "Please address the security issues and re-run the pipeline"
        exit 1

